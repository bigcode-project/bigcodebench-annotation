import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

def f_1745(df, test_size=0.2, random_state=42):
    """
    Predicts future sales based on historical data using a simple linear regression model and returns a plot object.
    
    Parameters:
    df (DataFrame): A pandas DataFrame with 'Sales' and 'Marketing Spend' columns.
    test_size (float): Proportion of the dataset to include in the test split (default 0.2).
    random_state (int): Controls the shuffling applied to the data before applying the split (default 42).
    
    Returns:
    matplotlib.axes.Axes: The Axes object with the plot.
    
    Raises:
    ValueError: If 'df' is not a pandas DataFrame or does not contain the required columns.

    Requirements:
    - pandas
    - numpy
    - sklearn.model_selection
    - sklearn.linear_model
    - matplotlib.pyplot
    
    Example:
    >>> df = pd.DataFrame({'Sales': np.random.randint(100, 2000, size=365), 'Marketing Spend': np.random.randint(1000, 5000, size=365)})
    >>> ax = f_1745(df)
    >>> ax.get_title() # Should return 'Sales vs. Marketing Spend Regression'
    'Sales vs. Marketing Spend Regression'
    """
    
    if not isinstance(df, pd.DataFrame) or not all(col in df.columns for col in ['Sales', 'Marketing Spend']):
        raise ValueError("Input must be a pandas DataFrame with 'Sales' and 'Marketing Spend' columns.")

    X = df[['Marketing Spend']]
    y = df['Sales']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)

    model = LinearRegression()
    model.fit(X_train, y_train)

    fig, ax = plt.subplots()
    ax.scatter(X, y, label='Actual Data')
    ax.plot(X, model.predict(X), color='red', label='Regression Line')
    ax.set_title('Sales vs. Marketing Spend Regression')
    ax.set_ylabel('Sales')
    ax.legend()

    return ax

import unittest

class TestCases(unittest.TestCase):
    def setUp(self):
        np.random.seed(40)
        self.df = pd.DataFrame({'Sales': np.random.randint(100, 2000, size=365), 'Marketing Spend': np.random.randint(1000, 5000, size=365)})
    
    def test_return_value(self):
        ax = f_1745(self.df)
        self.assertIsInstance(ax, plt.Axes)
        # Assuming 'ax' is the Axes object returned by your function 'f_1745'

        # Get scatter plot data (original data points)
        scatter_plot = ax.collections[0]  # Scatter plots are stored in ax.collections
        original_X = scatter_plot.get_offsets()[:, 0]
        original_y = scatter_plot.get_offsets()[:, 1]

        # Get line plot data (regression line)
        # Note: This may not exactly represent the original X values used for model fitting
        line_plot = ax.lines[0]  # Line plots are stored in ax.lines
        line_X = line_plot.get_xdata()
        line_y = line_plot.get_ydata()
        
        expect_original_X = [3172.0, 2820.0, 1477.0, 1258.0, 4799.0, 3826.0, 2651.0, 4943.0, 3852.0, 3545.0, 4941.0, 2253.0, 3297.0, 4153.0, 1305.0, 2645.0, 1187.0, 3880.0, 3743.0, 2114.0, 1088.0, 3905.0, 3208.0, 3833.0, 1021.0, 2339.0, 3981.0, 3254.0, 2747.0, 4637.0, 3210.0, 1241.0, 2941.0, 3137.0, 3326.0, 2636.0, 3758.0, 2499.0, 2566.0, 1433.0, 3592.0, 1288.0, 1207.0, 1123.0, 1813.0, 1728.0, 3368.0, 2599.0, 2862.0, 2576.0, 2015.0, 1059.0, 2563.0, 2514.0, 2259.0, 4431.0, 4476.0, 4656.0, 4637.0, 3365.0, 1855.0, 1434.0, 3403.0, 2920.0, 2415.0, 2615.0, 2348.0, 1424.0, 4804.0, 3412.0, 4247.0, 1489.0, 1553.0, 1069.0, 2092.0, 4695.0, 3106.0, 3527.0, 1182.0, 1791.0, 2911.0, 3053.0, 2925.0, 4594.0, 3190.0, 4654.0, 2902.0, 3587.0, 3071.0, 3632.0, 3174.0, 4824.0, 4853.0, 3581.0, 4824.0, 4131.0, 2458.0, 1852.0, 1792.0, 1691.0, 4933.0, 1421.0, 1399.0, 1972.0, 1037.0, 2089.0, 1507.0, 2597.0, 3689.0, 1797.0, 3527.0, 2631.0, 3019.0, 4020.0, 2760.0, 1241.0, 4494.0, 3306.0, 2716.0, 1893.0, 3822.0, 4044.0, 1676.0, 3276.0, 2958.0, 2431.0, 2204.0, 4830.0, 1890.0, 2573.0, 4669.0, 1089.0, 4246.0, 4993.0, 4900.0, 2622.0, 3477.0, 3837.0, 4625.0, 2053.0, 2703.0, 4382.0, 3157.0, 1317.0, 4177.0, 4663.0, 4553.0, 1011.0, 4444.0, 2714.0, 3070.0, 1999.0, 3084.0, 1890.0, 4608.0, 1024.0, 4374.0, 2285.0, 1121.0, 1817.0, 2032.0, 1295.0, 2811.0, 2577.0, 3952.0, 2455.0, 1930.0, 1540.0, 4502.0, 1761.0, 2349.0, 1658.0, 1594.0, 2281.0, 2633.0, 4429.0, 3386.0, 3593.0, 3638.0, 1732.0, 4539.0, 1518.0, 4829.0, 1616.0, 1665.0, 3564.0, 1779.0, 1419.0, 1097.0, 3959.0, 3636.0, 4503.0, 1633.0, 2429.0, 3563.0, 2003.0, 2419.0, 1755.0, 4245.0, 1879.0, 2087.0, 4956.0, 4665.0, 1562.0, 4884.0, 3442.0, 1833.0, 2283.0, 4741.0, 4838.0, 4175.0, 4011.0, 3190.0, 1255.0, 4876.0, 3508.0, 1289.0, 4580.0, 3690.0, 3963.0, 2541.0, 2911.0, 3836.0, 2798.0, 1044.0, 4817.0, 3204.0, 3228.0, 4857.0, 2345.0, 1344.0, 3321.0, 2180.0, 1025.0, 1600.0, 2252.0, 4844.0, 2062.0, 2213.0, 3496.0, 1844.0, 3348.0, 1937.0, 1522.0, 3527.0, 1710.0, 3649.0, 1094.0, 2199.0, 1389.0, 1709.0, 4549.0, 2708.0, 4129.0, 1707.0, 3544.0, 3618.0, 3695.0, 1610.0, 4322.0, 2860.0, 1573.0, 1241.0, 4992.0, 2034.0, 2468.0, 4291.0, 3626.0, 4898.0, 1330.0, 3040.0, 4173.0, 3569.0, 2071.0, 4117.0, 2427.0, 1946.0, 4061.0, 3991.0, 1633.0, 3445.0, 3883.0, 3238.0, 3041.0, 2251.0, 3934.0, 2170.0, 3197.0, 4686.0, 2700.0, 3547.0, 1211.0, 2956.0, 2102.0, 1074.0, 4682.0, 1495.0, 3839.0, 1313.0, 3478.0, 3488.0, 1076.0, 2773.0, 3489.0, 2314.0, 4464.0, 4885.0, 4650.0, 3915.0, 1763.0, 1953.0, 2076.0, 4747.0, 3753.0, 3760.0, 1242.0, 1925.0, 4259.0, 2084.0, 3782.0, 4961.0, 3420.0, 4590.0, 4869.0, 1566.0, 2751.0, 2636.0, 4746.0, 4963.0, 1805.0, 3851.0, 1764.0, 3096.0, 2776.0, 2148.0, 1561.0, 4989.0, 1566.0, 2289.0, 3308.0, 2317.0, 4454.0, 3254.0, 4223.0, 3893.0, 4068.0, 2380.0, 2670.0, 4752.0, 4874.0, 2534.0, 3710.0, 4149.0, 1884.0, 1673.0, 3155.0, 2705.0, 4623.0, 2738.0, 2254.0, 3634.0, 1927.0, 2700.0, 1333.0, 1508.0]
        
        expect_original_y = [1450.0, 319.0, 107.0, 265.0, 1116.0, 1564.0, 1430.0, 1829.0, 1392.0, 1963.0, 726.0, 1655.0, 1795.0, 942.0, 155.0, 543.0, 1215.0, 173.0, 1860.0, 1941.0, 1817.0, 1453.0, 1132.0, 1560.0, 1794.0, 1331.0, 1394.0, 960.0, 600.0, 1740.0, 798.0, 1838.0, 1146.0, 231.0, 1855.0, 967.0, 1835.0, 667.0, 341.0, 1079.0, 609.0, 1536.0, 1033.0, 310.0, 1046.0, 307.0, 1118.0, 1575.0, 642.0, 160.0, 400.0, 1554.0, 1467.0, 1629.0, 1039.0, 1031.0, 326.0, 1667.0, 310.0, 1232.0, 1001.0, 180.0, 1829.0, 1515.0, 832.0, 909.0, 199.0, 1731.0, 1871.0, 1852.0, 1875.0, 1601.0, 217.0, 1746.0, 765.0, 1335.0, 798.0, 1734.0, 1962.0, 1693.0, 157.0, 183.0, 1672.0, 1481.0, 1609.0, 848.0, 675.0, 814.0, 1508.0, 613.0, 1541.0, 1196.0, 157.0, 646.0, 1394.0, 345.0, 1842.0, 939.0, 284.0, 817.0, 1338.0, 1720.0, 1462.0, 703.0, 1392.0, 1854.0, 610.0, 301.0, 350.0, 1243.0, 215.0, 1919.0, 1885.0, 484.0, 1913.0, 194.0, 1753.0, 1993.0, 644.0, 1943.0, 1430.0, 606.0, 1400.0, 397.0, 1486.0, 842.0, 690.0, 411.0, 1939.0, 1295.0, 1760.0, 447.0, 176.0, 1635.0, 1025.0, 1681.0, 1131.0, 1006.0, 673.0, 1015.0, 1832.0, 1277.0, 1752.0, 347.0, 454.0, 1524.0, 1980.0, 417.0, 279.0, 1231.0, 1502.0, 1549.0, 1737.0, 926.0, 505.0, 1481.0, 643.0, 331.0, 1475.0, 985.0, 1039.0, 680.0, 1012.0, 1511.0, 883.0, 819.0, 1887.0, 1896.0, 205.0, 1258.0, 194.0, 1446.0, 1081.0, 1086.0, 1627.0, 311.0, 230.0, 1258.0, 223.0, 342.0, 1149.0, 1564.0, 1781.0, 1099.0, 1009.0, 1899.0, 278.0, 324.0, 1940.0, 1561.0, 1764.0, 394.0, 788.0, 1191.0, 223.0, 965.0, 1953.0, 1041.0, 161.0, 238.0, 1757.0, 1751.0, 925.0, 1432.0, 1871.0, 1420.0, 1365.0, 1745.0, 613.0, 1304.0, 1950.0, 956.0, 378.0, 1404.0, 798.0, 449.0, 686.0, 189.0, 334.0, 580.0, 527.0, 676.0, 427.0, 234.0, 1116.0, 1544.0, 305.0, 964.0, 358.0, 1700.0, 687.0, 1971.0, 1730.0, 1006.0, 1221.0, 1784.0, 1975.0, 950.0, 1717.0, 256.0, 695.0, 505.0, 767.0, 776.0, 350.0, 319.0, 1880.0, 565.0, 349.0, 883.0, 1162.0, 569.0, 160.0, 757.0, 579.0, 1820.0, 1387.0, 591.0, 1315.0, 411.0, 1530.0, 227.0, 675.0, 776.0, 187.0, 1749.0, 1758.0, 682.0, 1280.0, 1421.0, 1880.0, 1112.0, 1450.0, 1148.0, 1249.0, 1629.0, 643.0, 389.0, 1641.0, 1082.0, 308.0, 1239.0, 1716.0, 1826.0, 1592.0, 344.0, 1372.0, 1159.0, 662.0, 1157.0, 484.0, 748.0, 477.0, 1069.0, 1825.0, 1379.0, 1059.0, 912.0, 1064.0, 447.0, 1107.0, 801.0, 796.0, 117.0, 1213.0, 1038.0, 925.0, 704.0, 1758.0, 1313.0, 1394.0, 1050.0, 500.0, 1877.0, 1806.0, 1577.0, 1749.0, 1612.0, 792.0, 1108.0, 941.0, 402.0, 1525.0, 1011.0, 1921.0, 698.0, 1884.0, 692.0, 1378.0, 599.0, 993.0, 475.0, 132.0, 1988.0, 449.0, 1908.0, 1827.0, 159.0, 1822.0, 915.0, 140.0, 1410.0, 1205.0, 1739.0, 1909.0, 1865.0, 556.0, 124.0, 152.0, 1430.0, 739.0, 629.0, 1944.0, 764.0, 167.0, 1872.0, 1906.0, 1647.0, 1653.0, 1335.0, 1675.0, 583.0, 1331.0, 1613.0, 1286.0]
        
        expect_line_X = [3172, 2820, 1477, 1258, 4799, 3826, 2651, 4943, 3852, 3545, 4941, 2253, 3297, 4153, 1305, 2645, 1187, 3880, 3743, 2114, 1088, 3905, 3208, 3833, 1021, 2339, 3981, 3254, 2747, 4637, 3210, 1241, 2941, 3137, 3326, 2636, 3758, 2499, 2566, 1433, 3592, 1288, 1207, 1123, 1813, 1728, 3368, 2599, 2862, 2576, 2015, 1059, 2563, 2514, 2259, 4431, 4476, 4656, 4637, 3365, 1855, 1434, 3403, 2920, 2415, 2615, 2348, 1424, 4804, 3412, 4247, 1489, 1553, 1069, 2092, 4695, 3106, 3527, 1182, 1791, 2911, 3053, 2925, 4594, 3190, 4654, 2902, 3587, 3071, 3632, 3174, 4824, 4853, 3581, 4824, 4131, 2458, 1852, 1792, 1691, 4933, 1421, 1399, 1972, 1037, 2089, 1507, 2597, 3689, 1797, 3527, 2631, 3019, 4020, 2760, 1241, 4494, 3306, 2716, 1893, 3822, 4044, 1676, 3276, 2958, 2431, 2204, 4830, 1890, 2573, 4669, 1089, 4246, 4993, 4900, 2622, 3477, 3837, 4625, 2053, 2703, 4382, 3157, 1317, 4177, 4663, 4553, 1011, 4444, 2714, 3070, 1999, 3084, 1890, 4608, 1024, 4374, 2285, 1121, 1817, 2032, 1295, 2811, 2577, 3952, 2455, 1930, 1540, 4502, 1761, 2349, 1658, 1594, 2281, 2633, 4429, 3386, 3593, 3638, 1732, 4539, 1518, 4829, 1616, 1665, 3564, 1779, 1419, 1097, 3959, 3636, 4503, 1633, 2429, 3563, 2003, 2419, 1755, 4245, 1879, 2087, 4956, 4665, 1562, 4884, 3442, 1833, 2283, 4741, 4838, 4175, 4011, 3190, 1255, 4876, 3508, 1289, 4580, 3690, 3963, 2541, 2911, 3836, 2798, 1044, 4817, 3204, 3228, 4857, 2345, 1344, 3321, 2180, 1025, 1600, 2252, 4844, 2062, 2213, 3496, 1844, 3348, 1937, 1522, 3527, 1710, 3649, 1094, 2199, 1389, 1709, 4549, 2708, 4129, 1707, 3544, 3618, 3695, 1610, 4322, 2860, 1573, 1241, 4992, 2034, 2468, 4291, 3626, 4898, 1330, 3040, 4173, 3569, 2071, 4117, 2427, 1946, 4061, 3991, 1633, 3445, 3883, 3238, 3041, 2251, 3934, 2170, 3197, 4686, 2700, 3547, 1211, 2956, 2102, 1074, 4682, 1495, 3839, 1313, 3478, 3488, 1076, 2773, 3489, 2314, 4464, 4885, 4650, 3915, 1763, 1953, 2076, 4747, 3753, 3760, 1242, 1925, 4259, 2084, 3782, 4961, 3420, 4590, 4869, 1566, 2751, 2636, 4746, 4963, 1805, 3851, 1764, 3096, 2776, 2148, 1561, 4989, 1566, 2289, 3308, 2317, 4454, 3254, 4223, 3893, 4068, 2380, 2670, 4752, 4874, 2534, 3710, 4149, 1884, 1673, 3155, 2705, 4623, 2738, 2254, 3634, 1927, 2700, 1333, 1508]
        
        expect_line_y = [1077.6331264509313, 1077.7918985501526, 1078.3976682355344, 1078.4964497404476, 1076.8992565491324, 1077.3381351074916, 1077.8681272000629, 1076.8343043267234, 1077.32640762289, 1077.4648821526084, 1076.8352064409237, 1078.047647925887, 1077.5767443134237, 1077.1906394357716, 1078.4752500567447, 1077.8708335426634, 1078.528474794552, 1077.3137780240882, 1077.3755728467966, 1078.1103448627955, 1078.5731294474579, 1077.3025015965866, 1077.616888395329, 1077.334977707791, 1078.603350273162, 1078.0088570152818, 1077.268221256982, 1077.5961397687263, 1077.824825718457, 1076.972327799342, 1077.615986281129, 1078.5041177111486, 1077.7373206410452, 1077.6489134494334, 1077.5636636575218, 1077.874893056564, 1077.3688069902955, 1077.936687879272, 1077.9064670535681, 1078.417514747937, 1077.4436824689058, 1078.4829180274457, 1078.5194536525507, 1078.5573424489558, 1078.246113049914, 1078.2844529034192, 1077.5447192593192, 1077.891582169266, 1077.77295415195, 1077.9019564825676, 1078.1549995157015, 1078.5862101033597, 1077.9078202248684, 1077.9299220227713, 1078.0449415832868, 1077.0652455619547, 1077.0449479924519, 1076.963757714441, 1076.972327799342, 1077.5460724306195, 1078.2271686517113, 1078.4170636908368, 1077.528932260817, 1077.7467928401466, 1077.9745766756773, 1077.884365255665, 1078.0047975013813, 1078.4215742618376, 1076.8970012636319, 1077.5248727469166, 1077.1482400683658, 1078.3922555503336, 1078.3633878959297, 1078.5816995323592, 1078.1202681189968, 1076.9461664875387, 1077.6628962195352, 1077.4730011804097, 1078.5307300800523, 1078.2560363061152, 1077.750852354047, 1077.6868022458384, 1077.7445375546463, 1076.9917232546447, 1077.6250074231302, 1076.964659828641, 1077.7549118679476, 1077.445937754406, 1077.6786832180373, 1077.4256401849032, 1077.632224336731, 1076.8879801216308, 1076.874899465729, 1077.4486440970063, 1076.8879801216308, 1077.200562691973, 1077.9551812203747, 1078.2285218230115, 1078.2555852490152, 1078.3011420161213, 1076.8388148977242, 1078.4229274331378, 1078.4328506893391, 1078.1743949710042, 1078.596133359561, 1078.121621290297, 1078.3841365225326, 1077.8924842834663, 1077.3999299301997, 1078.253329963515, 1077.4730011804097, 1077.8771483420642, 1077.7021381872405, 1077.2506300300797, 1077.8189619761563, 1078.5041177111486, 1077.0368289646508, 1077.5726847995231, 1077.838808488559, 1078.210028481909, 1077.3399393358916, 1077.2398046596782, 1078.3079078726223, 1077.586216512525, 1077.7296526703442, 1077.9673597620763, 1078.06974972379, 1076.8852737790303, 1078.2113816532092, 1077.9033096538676, 1076.9578939721403, 1078.5726783903579, 1077.1486911254658, 1076.8117514717205, 1076.853699782026, 1077.8812078559647, 1077.4955540354126, 1077.3331734793908, 1076.977740484543, 1078.1378593458992, 1077.8446722308597, 1077.0873473598576, 1077.639892307432, 1078.4698373715441, 1077.17981406537, 1076.9606003147405, 1077.0102165957471, 1078.6078608441626, 1077.059381819654, 1077.8397106027592, 1077.6791342751374, 1078.1622164293026, 1077.6728194757366, 1078.2113816532092, 1076.985408455244, 1078.6019971018618, 1077.0909558166582, 1078.0332140986852, 1078.558244563156, 1078.2443088215136, 1078.1473315450005, 1078.4797606277455, 1077.7959580640531, 1077.9015054254673, 1077.2813019128837, 1077.9565343916747, 1078.1933393692068, 1078.3692516382305, 1077.0332205078503, 1078.269568019117, 1078.0043464442813, 1078.3160269004234, 1078.3448945548273, 1078.0350183270855, 1077.876246227864, 1077.0661476761547, 1077.5366002315182, 1077.4432314118055, 1077.4229338423029, 1078.282648675019, 1077.0165313951481, 1078.3791748944318, 1076.8857248361305, 1078.3349712986258, 1078.3128695007229, 1077.4563120677074, 1078.261448991316, 1078.4238295473378, 1078.5690699335573, 1077.2781445131834, 1077.423835956503, 1077.0327694507503, 1078.3273033279247, 1077.9682618762763, 1077.4567631248074, 1078.1604122009023, 1077.972772447277, 1078.2722743617173, 1077.149142182566, 1078.21634328131, 1078.1225234044973, 1076.8284405844227, 1076.9596982005405, 1078.3593283820292, 1076.860916695627, 1077.5113410339147, 1078.2370919079126, 1078.0341162128852, 1076.9254178609358, 1076.88166532223, 1077.1807161795703, 1077.2546895439802, 1077.6250074231302, 1078.4978029117478, 1076.8645251524276, 1077.4815712653108, 1078.4824669703457, 1076.9980380540455, 1077.3994788730997, 1077.2763402847831, 1077.9177434810697, 1077.750852354047, 1077.3336245364908, 1077.801821806354, 1078.5929759598607, 1076.891137521331, 1077.6186926237292, 1077.6078672533279, 1076.8730952373287, 1078.0061506726815, 1078.4576588298423, 1077.565918943022, 1078.0805750941915, 1078.6015460447618, 1078.3421882122268, 1078.048098982987, 1076.8789589796295, 1078.1337998319987, 1078.0656902098895, 1077.4869839505116, 1078.232130279812, 1077.5537404013205, 1078.1901819695063, 1078.3773706660315, 1077.4730011804097, 1078.2925719312202, 1077.417972214202, 1078.5704231048576, 1078.0720050092905, 1078.4373612603397, 1078.2930229883202, 1077.0120208241474, 1077.8424169453594, 1077.201464806173, 1078.2939251025202, 1077.4653332097087, 1077.4319549843042, 1077.3972235875995, 1078.3376776412263, 1077.1144107858613, 1077.7738562661502, 1078.3543667539284, 1078.5041177111486, 1076.8122025288205, 1078.1464294308005, 1077.950670649374, 1077.1283935559632, 1077.4283465275037, 1076.8546018962263, 1078.4639736292434, 1077.6926659881392, 1077.1816182937703, 1077.454056782207, 1078.1297403180981, 1077.2068774913737, 1077.9691639904765, 1078.1861224556058, 1077.232136688977, 1077.2637106859813, 1078.3273033279247, 1077.5099878626147, 1077.312424852788, 1077.603356682327, 1077.6922149310392, 1078.0485500400873, 1077.289420940685, 1078.085085665192, 1077.6218500234297, 1076.9502260014392, 1077.84602540216, 1077.4639800384084, 1078.5176494241505, 1077.7305547845444, 1078.1157575479963, 1078.5794442468589, 1076.9520302298395, 1078.3895492077331, 1077.3322713651908, 1078.4716415999442, 1077.4951029783126, 1077.490592407312, 1078.5785421326586, 1077.8130982338555, 1077.4901413502118, 1078.0201334427834, 1077.0503606776526, 1076.860465638527, 1076.9664640570413, 1077.297991025586, 1078.2686659049168, 1078.1829650559055, 1078.1274850325979, 1076.9227115183355, 1077.3710622757958, 1077.3679048760955, 1078.5036666540486, 1078.195594654707, 1077.142827383165, 1078.1238765757973, 1077.3579816198942, 1076.8261852989224, 1077.521264290116, 1076.993527483045, 1076.867682552128, 1078.357524153629, 1077.8230214900568, 1077.874893056564, 1076.9231625754355, 1076.8252831847224, 1078.2497215067144, 1077.32685867999, 1078.2682148478168, 1077.6674067905358, 1077.8117450625552, 1078.0950089213934, 1078.3597794391292, 1076.8135557001208, 1078.357524153629, 1078.031409870285, 1077.571782685323, 1078.0187802714831, 1077.0548712486532, 1077.5961397687263, 1077.1590654387674, 1077.3079142817874, 1077.2289792892768, 1077.9903636741794, 1077.8595571151618, 1076.920456232835, 1076.8654272666276, 1077.92090088077, 1077.3904577310984, 1077.1924436641718, 1078.2140879958095, 1078.3092610439223, 1077.6407944216323, 1077.8437701166597, 1076.978642598743, 1077.8288852323576, 1078.047196868787, 1077.4247380707031, 1078.194692540507, 1077.84602540216, 1078.462620457943, 1078.3836854654323]
        
        rounded_expect_line_y = [round(num, 7) for num in expect_line_y]
        rounded_line_y = [round(num, 7) for num in line_y.tolist()]
    
        self.assertEqual(expect_original_X, original_X.tolist(), "DataFrame contents should match the expected output")
        self.assertEqual(expect_original_y, original_y.tolist(), "DataFrame contents should match the expected output")
        self.assertEqual(expect_line_X, line_X.tolist(), "DataFrame contents should match the expected output")
        self.assertEqual(rounded_expect_line_y, rounded_line_y, "DataFrame contents should match the expected output")
    
    def test_return_type(self):
        ax = f_1745(self.df)
        self.assertIsInstance(ax, plt.Axes)

    def test_invalid_input(self):
        with self.assertRaises(ValueError):
            f_1745(pd.DataFrame({'A': [1, 2], 'B': [3, 4]}))

    def test_plot_title(self):
        ax = f_1745(self.df)
        self.assertEqual(ax.get_title(), 'Sales vs. Marketing Spend Regression')

    def test_plot_labels(self):
        ax = f_1745(self.df)
        self.assertTrue(ax.get_ylabel() == 'Sales')

    def test_custom_test_size(self):
        ax = f_1745(self.df, test_size=0.3)
        # No assert here, just checking if it runs without error

def run_tests():
    """Run all tests for this function."""
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestCases)
    runner = unittest.TextTestRunner()
    runner.run(suite)

if __name__ == "__main__":
    import doctest
    doctest.testmod()
    run_tests()