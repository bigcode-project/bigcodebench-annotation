import subprocess
import pandas as pd
import matplotlib.pyplot as plt


def f_112(script_path="/path/to/my/rscript.r", output_file="/pathto/output.csv"):
    """
    Run an R script that generates a CSV file, reads the output data, and plots it.

    Parameters:
    - script_path (str): Path to the R script to be executed. Default is '/path/to/MyrScript.r'.
    - output_file (str): Path to the expected output CSV file generated by the R script. Default is '/path/to/output.csv'.

    Returns:
    - DataFrame: Loaded data from the output CSV file.
    - Axes: Plot of the loaded data.

    Requirements:
    - subprocess
    - pandas
    - matplotlib.pyplot

    Example:
    >>> df, ax = f_112('/path/to/script.r', '/path/to/output.csv')
    """
    subprocess.call(["Rscript", "--vanilla", script_path])
    data = pd.read_csv(output_file)
    ax = data.plot()
    plt.title("Plot from R script")
    return data, ax


import unittest
import os


class TestCases(unittest.TestCase):
    """Test cases for the f_112 function."""

    def setUp(self):
        self.test_dir = "data/f_112"
        os.makedirs(self.test_dir, exist_ok=True)

        self.r_1 = os.path.join(self.test_dir, "r_1.r")
        r_1 = """
        data <- data.frame(
            "Name" = c("John", "Anna", "Peter", "Linda"),
            "Age" = c(23, 24, 22, 25),
            "Weight" = c(70, 60, 80, 65)
        )

        # Writing data to a CSV file
        write.csv(data, "data/f_112/csv_1.csv", row.names = FALSE)
        """
        with open(self.r_1, "w") as f:
            f.write(r_1)
        self.f_1 = os.path.join(self.test_dir, "csv_1.csv")

        self.r_2 = os.path.join(self.test_dir, "r_2.r")
        r_2 = """
        data <- data.frame(
            "Name" = c("John", "Anna", "Peter", "Linda"),
            "Age" = c(23, 24, 22, 25),
            "Height" = c(170, 160, 180, 165)
        )

        # Writing data to a CSV file
        write.csv(data, "data/f_112/csv_2.csv", row.names = FALSE)
        """
        with open(self.r_2, "w") as f:
            f.write(r_2)
        self.f_2 = os.path.join(self.test_dir, "csv_2.csv")

        self.r_3 = os.path.join(self.test_dir, "r_3.r")
        r_3 = """
        data <- data.frame(
            "City" = c("London", "Paris", "Berlin", "Tokyo"),
            "Attractivity" = c(7, 8, 2, 9)
        )

        # Writing data to a CSV file
        write.csv(data, "data/f_112/csv_3.csv", row.names = FALSE)
        """
        with open(self.r_3, "w") as f:
            f.write(r_3)
        self.f_3 = os.path.join(self.test_dir, "csv_3.csv")

        self.r_4 = os.path.join(self.test_dir, "r_4.r")
        r_4 = """
        data <- data.frame(
            "Fruits" = c("Orange", "Banna", "Apple"),
            "Cost" = c(3, 3, 1)
        )

        # Writing data to a CSV file
        write.csv(data, "data/f_112/csv_4.csv", row.names = FALSE)
        """
        with open(self.r_4, "w") as f:
            f.write(r_4)
        self.f_4 = os.path.join(self.test_dir, "csv_4.csv")

        self.r_5 = os.path.join(self.test_dir, "r_5.r")
        r_5 = """
        data <- data.frame(
            "Direction" = c("East", "West"),
            "Index" = c(1, -1)
        )

        # Writing data to a CSV file
        write.csv(data, "data/f_112/csv_5.csv", row.names = FALSE)
        """
        with open(self.r_5, "w") as f:
            f.write(r_5)
        self.f_5 = os.path.join(self.test_dir, "csv_5.csv")

    def tearDown(self) -> None:
        import shutil

        shutil.rmtree(self.test_dir)

    def test_case_1(self):
        df, ax = f_112(script_path=self.r_1, output_file=self.f_1)
        expected_df = pd.read_csv(self.f_1)
        pd.testing.assert_frame_equal(df, expected_df)
        self.assertIsNotNone(ax)

    def test_case_2(self):
        df, ax = f_112(script_path=self.r_2, output_file=self.f_2)
        expected_df = pd.read_csv(self.f_2)
        pd.testing.assert_frame_equal(df, expected_df)
        self.assertIsNotNone(ax)

    def test_case_3(self):
        df, ax = f_112(script_path=self.r_3, output_file=self.f_3)
        expected_df = pd.read_csv(self.f_3)
        pd.testing.assert_frame_equal(df, expected_df)
        self.assertIsNotNone(ax)

    def test_case_4(self):
        df, ax = f_112(script_path=self.r_4, output_file=self.f_4)
        expected_df = pd.read_csv(self.f_4)
        pd.testing.assert_frame_equal(df, expected_df)
        self.assertIsNotNone(ax)

    def test_case_5(self):
        df, ax = f_112(script_path=self.r_5, output_file=self.f_5)
        expected_df = pd.read_csv(self.f_5)
        pd.testing.assert_frame_equal(df, expected_df)
        self.assertIsNotNone(ax)


def run_tests():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestCases))
    runner = unittest.TextTestRunner()
    runner.run(suite)

if __name__ == "__main__":
    run_tests()
